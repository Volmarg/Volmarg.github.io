{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Personal Management System This documentation cover some basic information how to start or modify project Personal Management System . Author: Dariusz W\u0142odarczyk Nickname: Volmarg Reiso Contact: dwlodarczyk12@gmail.com","title":"Personal Management System"},{"location":"#personal-management-system","text":"This documentation cover some basic information how to start or modify project Personal Management System . Author: Dariusz W\u0142odarczyk Nickname: Volmarg Reiso Contact: dwlodarczyk12@gmail.com","title":"Personal Management System"},{"location":"adding-menu-elements/","text":"Requirements Sidebar menu Sidebar menu main tpl. can be found in: templates/page-elements/components/sidebar/menu.twig Sidebar menu elements Sidebar menu main tpl. can be found in: templates/page-elements/components/sidebar/menu-nodes/","title":"Adding menu elements"},{"location":"adding-menu-elements/#requirements","text":"","title":"Requirements"},{"location":"adding-menu-elements/#sidebar-menu","text":"Sidebar menu main tpl. can be found in: templates/page-elements/components/sidebar/menu.twig","title":"Sidebar menu"},{"location":"adding-menu-elements/#sidebar-menu-elements","text":"Sidebar menu main tpl. can be found in: templates/page-elements/components/sidebar/menu-nodes/","title":"Sidebar menu elements"},{"location":"assets/","text":"Assets Assets vs static assets Problems Structure explaination","title":"Assets"},{"location":"assets/#assets","text":"","title":"Assets"},{"location":"assets/#assets-vs-static-assets","text":"","title":"Assets vs static assets"},{"location":"assets/#problems","text":"","title":"Problems"},{"location":"assets/#structure-explaination","text":"","title":"Structure explaination"},{"location":"datalist-type/","text":"DataList type This is a custom form type based on ChoicesType The logic behind it a bit tricky since I wanted to have choices but also possibility to add new choice element if there is nothing interesting on list Because of this and because of how ChoicesType works I had to create controller for handling the form events This special controller can be found in: src/Form/Events/DatalistLogicOverride.php What it does So generally DataList itself don't work correctly - symfony ignores the new insterted element In my controller I pretty much do this: Overwrite the form data to pretend that everything is ok: pass the isValid() And then save the new data Cheating! But works... Form construction example static::$choices = (is_array($options) ? $options['goals'] : []); $builder - add('Date', null, [ 'attr' = [ 'data-provide' = \"datepicker\", 'data-date-format' = \"yyyy-mm-dd\", 'data-date-today-highlight' = true, 'autocomplete' = 'off' ], 'data' = date('Y-m-d') ]) - add('Description', null, [ 'attr' = [ 'autocomplete' = 'off' ] ]) - add('Minutes', null, [ 'attr' = [ 'autocomplete' = 'off' ] ]); if(!empty(static::$choices)){ $builder - add('Goal', DatalistType::class, [ 'choices' = $options['goals'], 'required' = false ]) - addEventListener(FormEvents::POST_SUBMIT, function (FormEvent $event) { DatalistLogicOverride::postSubmit($event); }) - addEventListener(FormEvents::PRE_SUBMIT, function (FormEvent $event) { DatalistLogicOverride::preSubmit($event, ['Goal'], static::$choices); }); }else{ $builder - add('Goal', TextType::class, [ 'required' = false ]); } $builder- add('Type', ChoiceType::class, [ 'choices' = $options['entity_enums'], 'attr' = [ 'autocomplete' = 'off' ] ]); $builder- add('submit', SubmitType::class); You need to pass choices from controller foreach ($goalsWithTimes as $goalWithTime) { $goals[] = $goalWithTime[MyJobAfterhoursRepository::GOAL_FIELD]; } return $this- createForm(MyJobAfterhoursType::class, null, [ 'entity_enums' = $this- entity_enums, 'goals' = $goals, ]); Next thing is that array passed to choices should have keys equal to values but don't worry my controller will change the array construction anyway The problem is with the situation where there is NO choice yet defined, then the form won't work, and that's why here comes this solution: if(!empty(static::$choices)){ $builder - add('Goal', DatalistType::class, [ 'choices' = $options['goals'], 'required' = false ]) - addEventListener(FormEvents::POST_SUBMIT, function (FormEvent $event) { DatalistLogicOverride::postSubmit($event); }) - addEventListener(FormEvents::PRE_SUBMIT, function (FormEvent $event) { DatalistLogicOverride::preSubmit($event, ['Goal'], static::$choices); }); }else{ $builder - add('Goal', TextType::class, [ 'required' = false ]); } If not types - then normal TextType Else DataListType Also pay attention on the preSubmit second Param - You pass here names of fields which are DatalistType This is needed because controller overwrites the $event which has names of fields so it needs to know which fields should be changed","title":"DataList Type"},{"location":"datalist-type/#datalist-type","text":"This is a custom form type based on ChoicesType The logic behind it a bit tricky since I wanted to have choices but also possibility to add new choice element if there is nothing interesting on list Because of this and because of how ChoicesType works I had to create controller for handling the form events This special controller can be found in: src/Form/Events/DatalistLogicOverride.php What it does So generally DataList itself don't work correctly - symfony ignores the new insterted element In my controller I pretty much do this: Overwrite the form data to pretend that everything is ok: pass the isValid() And then save the new data Cheating! But works...","title":"DataList type"},{"location":"datalist-type/#form-construction-example","text":"static::$choices = (is_array($options) ? $options['goals'] : []); $builder - add('Date', null, [ 'attr' = [ 'data-provide' = \"datepicker\", 'data-date-format' = \"yyyy-mm-dd\", 'data-date-today-highlight' = true, 'autocomplete' = 'off' ], 'data' = date('Y-m-d') ]) - add('Description', null, [ 'attr' = [ 'autocomplete' = 'off' ] ]) - add('Minutes', null, [ 'attr' = [ 'autocomplete' = 'off' ] ]); if(!empty(static::$choices)){ $builder - add('Goal', DatalistType::class, [ 'choices' = $options['goals'], 'required' = false ]) - addEventListener(FormEvents::POST_SUBMIT, function (FormEvent $event) { DatalistLogicOverride::postSubmit($event); }) - addEventListener(FormEvents::PRE_SUBMIT, function (FormEvent $event) { DatalistLogicOverride::preSubmit($event, ['Goal'], static::$choices); }); }else{ $builder - add('Goal', TextType::class, [ 'required' = false ]); } $builder- add('Type', ChoiceType::class, [ 'choices' = $options['entity_enums'], 'attr' = [ 'autocomplete' = 'off' ] ]); $builder- add('submit', SubmitType::class); You need to pass choices from controller foreach ($goalsWithTimes as $goalWithTime) { $goals[] = $goalWithTime[MyJobAfterhoursRepository::GOAL_FIELD]; } return $this- createForm(MyJobAfterhoursType::class, null, [ 'entity_enums' = $this- entity_enums, 'goals' = $goals, ]); Next thing is that array passed to choices should have keys equal to values but don't worry my controller will change the array construction anyway The problem is with the situation where there is NO choice yet defined, then the form won't work, and that's why here comes this solution: if(!empty(static::$choices)){ $builder - add('Goal', DatalistType::class, [ 'choices' = $options['goals'], 'required' = false ]) - addEventListener(FormEvents::POST_SUBMIT, function (FormEvent $event) { DatalistLogicOverride::postSubmit($event); }) - addEventListener(FormEvents::PRE_SUBMIT, function (FormEvent $event) { DatalistLogicOverride::preSubmit($event, ['Goal'], static::$choices); }); }else{ $builder - add('Goal', TextType::class, [ 'required' = false ]); } If not types - then normal TextType Else DataListType Also pay attention on the preSubmit second Param - You pass here names of fields which are DatalistType This is needed because controller overwrites the $event which has names of fields so it needs to know which fields should be changed","title":"Form construction example"},{"location":"developer-mode/","text":"Turning on development mode Development might be annoying on slower machines since Encore watcher will recompile every js and css into output bundle. I've already tried to optimize the work of Encore by separating never changed js files to one bundle and edited files to second bundle. I decided to leave it as it is, because this took me to much time and I ended with 2 files with the same core logic and weight - waste of time. Server This part is simple. Keep Your symfony server running: bin/console server:run 0.0.0.0:8001 Webpack Encore Watcher This is one is also simple Open cli in the root of Your project Runt this command as sudo ./node_modules/.bin/encore dev --watch Keep the watcher server running This means - don't close the console tab In .env Set application enviroment to Development APP_ENV=prod to APP_ENV=dev Enable debugging APP_DEBUG=1 NodeJs You will need NodeJs (with npm). Follow the steps below: In normal case You would most likely need just one command to install packages but there are some messed up dependencies: Run this commands one after another: (I recommend sudo - permission to write) (around 300 mb download) npm update npm install -g --unsafe-perm npm i node-sass -g --unsafe-perm nodejs node_modules/node-sass/scripts/install.js npm rebuild node-sass You might need to change project folder permissions and groups after that but there shouldn't be any problem Problems You must understand that plenty of simple plugins etc just won't work with webpack easily or won't work at all for example it took me hours of research and tests to just activate tinymce in webpack and then more hours to fix it's ui etc. Because of this You will see 2 types of assets in public folder: assets - compiled by Encore assets_ - your own scripts For example libraries that don't work with Webpack Then is another problem assets_ use pure JS, because Webpack handles JQ NodeJs and NPM - tips NodeJS - on disco dingo installing NodeJS via package manager didn't worked well. Generally it's recommended to use NodeJS 9 , but this solution also worked: curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash - (I don't remember but most likely without the - on end) sudo apt-get install -y nodejs Npm - on disco dingo i had strange situation which didn't occurred on Ubuntu 18. I've wrote above that You need to do this: npm i node-sass -g --unsafe-perm nodejs node_modules/node-sass/scripts/install.js It doesn't worked on disco dingo, I had to do this: npm i node-sass --unsafe-perm nodejs node_modules/node-sass/scripts/install.js","title":"Developer mode"},{"location":"developer-mode/#turning-on-development-mode","text":"Development might be annoying on slower machines since Encore watcher will recompile every js and css into output bundle. I've already tried to optimize the work of Encore by separating never changed js files to one bundle and edited files to second bundle. I decided to leave it as it is, because this took me to much time and I ended with 2 files with the same core logic and weight - waste of time.","title":"Turning on development mode"},{"location":"developer-mode/#server","text":"This part is simple. Keep Your symfony server running: bin/console server:run 0.0.0.0:8001","title":"Server"},{"location":"developer-mode/#webpack-encore-watcher","text":"This is one is also simple Open cli in the root of Your project Runt this command as sudo ./node_modules/.bin/encore dev --watch Keep the watcher server running This means - don't close the console tab In .env Set application enviroment to Development APP_ENV=prod to APP_ENV=dev Enable debugging APP_DEBUG=1","title":"Webpack Encore Watcher"},{"location":"developer-mode/#nodejs","text":"You will need NodeJs (with npm). Follow the steps below: In normal case You would most likely need just one command to install packages but there are some messed up dependencies: Run this commands one after another: (I recommend sudo - permission to write) (around 300 mb download) npm update npm install -g --unsafe-perm npm i node-sass -g --unsafe-perm nodejs node_modules/node-sass/scripts/install.js npm rebuild node-sass You might need to change project folder permissions and groups after that but there shouldn't be any problem","title":"NodeJs"},{"location":"developer-mode/#problems","text":"You must understand that plenty of simple plugins etc just won't work with webpack easily or won't work at all for example it took me hours of research and tests to just activate tinymce in webpack and then more hours to fix it's ui etc. Because of this You will see 2 types of assets in public folder: assets - compiled by Encore assets_ - your own scripts For example libraries that don't work with Webpack Then is another problem assets_ use pure JS, because Webpack handles JQ","title":"Problems"},{"location":"developer-mode/#nodejs-and-npm-tips","text":"NodeJS - on disco dingo installing NodeJS via package manager didn't worked well. Generally it's recommended to use NodeJS 9 , but this solution also worked: curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash - (I don't remember but most likely without the - on end) sudo apt-get install -y nodejs Npm - on disco dingo i had strange situation which didn't occurred on Ubuntu 18. I've wrote above that You need to do this: npm i node-sass -g --unsafe-perm nodejs node_modules/node-sass/scripts/install.js It doesn't worked on disco dingo, I had to do this: npm i node-sass --unsafe-perm nodejs node_modules/node-sass/scripts/install.js","title":"NodeJs and NPM - tips"},{"location":"final-thoughts/","text":"Final Thoughts Multiple users I don't even assume possibility to create more users. I'm 100% that all users will see all records in all modules. This is Personal management system, so I've totally ignored the possibility to have more than 1 user. Modularity Generally, if You follow the simple logic i presented so far - that is separated folders for each module - then it's possible to share Your moudle with others. Ofc. still You need to write Your own separated logic for js, but again if You place it in specified folder then as You can see module sharing is simple. Module instalator No. I'm not going to write it, but with above information - maybe someone someday will think about it. Old unuesed files In some places You might find for example some unused templates etc - this are remaining from original Symfonator and I keep them as reference.","title":"Final thoughts"},{"location":"final-thoughts/#final-thoughts","text":"","title":"Final Thoughts"},{"location":"final-thoughts/#multiple-users","text":"I don't even assume possibility to create more users. I'm 100% that all users will see all records in all modules. This is Personal management system, so I've totally ignored the possibility to have more than 1 user.","title":"Multiple users"},{"location":"final-thoughts/#modularity","text":"Generally, if You follow the simple logic i presented so far - that is separated folders for each module - then it's possible to share Your moudle with others. Ofc. still You need to write Your own separated logic for js, but again if You place it in specified folder then as You can see module sharing is simple.","title":"Modularity"},{"location":"final-thoughts/#module-instalator","text":"No. I'm not going to write it, but with above information - maybe someone someday will think about it.","title":"Module instalator"},{"location":"final-thoughts/#old-unuesed-files","text":"In some places You might find for example some unused templates etc - this are remaining from original Symfonator and I keep them as reference.","title":"Old unuesed files"},{"location":"fontawesome-type/","text":"FontawesomepickerType Usage example $builder- add('icon', FontawesomepickerType::class, []); Description This type creates input and button with which You will be able to pick up fontawesome icon from list and save it as string. I'm using this Type in MyNotesCategories for picking icon for category.","title":"Fontawesomepicker Type"},{"location":"fontawesome-type/#fontawesomepickertype","text":"","title":"FontawesomepickerType"},{"location":"fontawesome-type/#usage-example","text":"$builder- add('icon', FontawesomepickerType::class, []);","title":"Usage example"},{"location":"fontawesome-type/#description","text":"This type creates input and button with which You will be able to pick up fontawesome icon from list and save it as string. I'm using this Type in MyNotesCategories for picking icon for category.","title":"Description"},{"location":"installation/","text":"Installation I will not guide You here how to setup DB, what composer or node can do - just step by step guide and hints to make this project work Keep in mind that i write 98% of everything here from perspective of Linux It's important to follow this sections one after another, for example You can't make services before permissions because You won't be able to generate key Linux First You need the tools for managing packages Installing composer Installing npm and Node Then You need environment Installing LAMP Unzip/put entire project into Your base html folder usually /var/www/html/YourFolder/ beware that it's better to copy it via terminal as files like .env might not be copied via gui Now open terminal Go to section general Windows First You need the tools for managing packages Installing composer Installing npm and Node Then You need environment (Pick one) Xampp Wamp Unzip/put entire project into Your base html folder which depends on aplication You use. Check corresponding manuals where projects folders are for Xampp or Wampp , usually this is: Xampp C:\\xampp\\htdocs Wamp c:\\wamp\\www Now open terminal - I'm using git bash terminal Go to section general General What You need generally: Technical knowledge (or someone with it) My downloaded repository Installing packages You will see ALOT of errors with npm packages - ignore them, everything works anyway. Run composer install (as sudo) (around 100mb to download) In case You have this error An error occurred: Could not resolve host: security.sensiolabs.org. Run this command: composer require sensiolabs/security-checker Configuring environment Create a database that You will use for this application preapre login for this database prepare password for this database preapre host and port for this database Env If the file .env does not exist in the root folder - create it Open .env file inside root of project Add Your database connection as described in: Doctrine (section: Configuring the Database) In my case it looks like this: DATABASE_URL=mysql://user:password@127.0.0.1:3306/pms Set application environment to Production APP_ENV=dev to APP_ENV=prod Disable debugging APP_DEBUG=0 Building cache Now run this commands one after another sudo bin/console cache:clear sudo bin/console cache:warmup sudo bin/console doctrine:schema:update --env=dev --force this is very important, due to symfony issues, making diff, or normal update generates incorrect sql where some nullable fields are NOT NULL sudo bin/console fos:user:create --super-admin Info \u2013 You got to make it as sudo otherwise You will need to set groups, permissions etc. twice. After setting permissions sudo won't be needed for this commands. Permissions In root folder of project run this commands: sudo chown -R www-data var sudo chgrp -R www-data var sudo chmod -R 777 var Services In terminal go to Your project root folder (example: cd/var/www/html/YourFolder ) Run this command: bin/console --env=dev encrypt:genkey Important! save somewhere the generated key This key is used to encrypt and decrypt passwords stored in Passwords module Without this key You won't be able to decrypt Your passwords Edit the file: config/services.yaml Change section parameters to this: parameters: locale: 'en' #Leave any other subsections like this one encrypt_key: 'YourGeneratedKey goes here' Starting application Now run symfony server as described: Built in web server Just run this command from root folder of project: bin/console --env=dev server:run 0.0.0.0:8005 (or other port if this one is used) You can now access Your project in browser: http://127.0.0.1:8005 (or other port that've You added) Problems - tips I've tested project few times on Ubuntu 18.x and Ubuntu 19.x , (clean and already with packages) and I found several problems which not really are a part of installation guide but, it will help You in case of problems Php xml extenstion - this might happen when trying to install packages from composer Follow this guide sudo apt-get install php-xml sudo service apache2 restart Can't login/sql_mode - You might be unable to login (without any errors - due to debugging off), but You need to turn off full_group_by, You need to turn it off anyway otherwise sqls in repositories won't work and dashboard will crash: Follow this guide Just edit my.cnf If on the end there is no section [mysqld] then add it and below add what they write, for example it might be: sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION Restart Mysql server service mysql restart Access denied - when running schema update . You need to create new user and give him full privileges: Follow this guide CREATE USER 'newuser'@'localhost' IDENTIFIED BY 'user_password'; GRANT ALL PRIVILEGES ON database_name.* TO 'database_user'@'localhost'; Then use that user and password to set connection in .env","title":"Installation"},{"location":"installation/#installation","text":"I will not guide You here how to setup DB, what composer or node can do - just step by step guide and hints to make this project work Keep in mind that i write 98% of everything here from perspective of Linux It's important to follow this sections one after another, for example You can't make services before permissions because You won't be able to generate key","title":"Installation"},{"location":"installation/#linux","text":"First You need the tools for managing packages Installing composer Installing npm and Node Then You need environment Installing LAMP Unzip/put entire project into Your base html folder usually /var/www/html/YourFolder/ beware that it's better to copy it via terminal as files like .env might not be copied via gui Now open terminal Go to section general","title":"Linux"},{"location":"installation/#windows","text":"First You need the tools for managing packages Installing composer Installing npm and Node Then You need environment (Pick one) Xampp Wamp Unzip/put entire project into Your base html folder which depends on aplication You use. Check corresponding manuals where projects folders are for Xampp or Wampp , usually this is: Xampp C:\\xampp\\htdocs Wamp c:\\wamp\\www Now open terminal - I'm using git bash terminal Go to section general","title":"Windows"},{"location":"installation/#general","text":"What You need generally: Technical knowledge (or someone with it) My downloaded repository","title":"General"},{"location":"installation/#installing-packages","text":"You will see ALOT of errors with npm packages - ignore them, everything works anyway. Run composer install (as sudo) (around 100mb to download) In case You have this error An error occurred: Could not resolve host: security.sensiolabs.org. Run this command: composer require sensiolabs/security-checker","title":"Installing packages"},{"location":"installation/#configuring-environment","text":"Create a database that You will use for this application preapre login for this database prepare password for this database preapre host and port for this database","title":"Configuring environment"},{"location":"installation/#env","text":"If the file .env does not exist in the root folder - create it Open .env file inside root of project Add Your database connection as described in: Doctrine (section: Configuring the Database) In my case it looks like this: DATABASE_URL=mysql://user:password@127.0.0.1:3306/pms Set application environment to Production APP_ENV=dev to APP_ENV=prod Disable debugging APP_DEBUG=0","title":"Env"},{"location":"installation/#building-cache","text":"Now run this commands one after another sudo bin/console cache:clear sudo bin/console cache:warmup sudo bin/console doctrine:schema:update --env=dev --force this is very important, due to symfony issues, making diff, or normal update generates incorrect sql where some nullable fields are NOT NULL sudo bin/console fos:user:create --super-admin Info \u2013 You got to make it as sudo otherwise You will need to set groups, permissions etc. twice. After setting permissions sudo won't be needed for this commands.","title":"Building cache"},{"location":"installation/#permissions","text":"In root folder of project run this commands: sudo chown -R www-data var sudo chgrp -R www-data var sudo chmod -R 777 var","title":"Permissions"},{"location":"installation/#services","text":"In terminal go to Your project root folder (example: cd/var/www/html/YourFolder ) Run this command: bin/console --env=dev encrypt:genkey Important! save somewhere the generated key This key is used to encrypt and decrypt passwords stored in Passwords module Without this key You won't be able to decrypt Your passwords Edit the file: config/services.yaml Change section parameters to this: parameters: locale: 'en' #Leave any other subsections like this one encrypt_key: 'YourGeneratedKey goes here'","title":"Services"},{"location":"installation/#starting-application","text":"Now run symfony server as described: Built in web server Just run this command from root folder of project: bin/console --env=dev server:run 0.0.0.0:8005 (or other port if this one is used) You can now access Your project in browser: http://127.0.0.1:8005 (or other port that've You added)","title":"Starting application"},{"location":"installation/#problems-tips","text":"I've tested project few times on Ubuntu 18.x and Ubuntu 19.x , (clean and already with packages) and I found several problems which not really are a part of installation guide but, it will help You in case of problems Php xml extenstion - this might happen when trying to install packages from composer Follow this guide sudo apt-get install php-xml sudo service apache2 restart Can't login/sql_mode - You might be unable to login (without any errors - due to debugging off), but You need to turn off full_group_by, You need to turn it off anyway otherwise sqls in repositories won't work and dashboard will crash: Follow this guide Just edit my.cnf If on the end there is no section [mysqld] then add it and below add what they write, for example it might be: sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION Restart Mysql server service mysql restart Access denied - when running schema update . You need to create new user and give him full privileges: Follow this guide CREATE USER 'newuser'@'localhost' IDENTIFIED BY 'user_password'; GRANT ALL PRIVILEGES ON database_name.* TO 'database_user'@'localhost'; Then use that user and password to set connection in .env","title":"Problems - tips"},{"location":"requirements/","text":"Requirements Linux Php 7.2x MySQL You can just use LAMP server Composer NodeJs Npm Sudo Windows Php 7.2x MySQL You can just use Xampp or Wamp server Composer NodeJs Npm","title":"Requirements"},{"location":"requirements/#requirements","text":"","title":"Requirements"},{"location":"requirements/#linux","text":"Php 7.2x MySQL You can just use LAMP server Composer NodeJs Npm Sudo","title":"Linux"},{"location":"requirements/#windows","text":"Php 7.2x MySQL You can just use Xampp or Wamp server Composer NodeJs Npm","title":"Windows"},{"location":"tips-and-tricks-automatition/","text":"Tips and tricks - automatition Automatic datatable If You have table then just add attribute to it data-table=\"true\" - it will automatically turn table to datatable if the table is correct which means for example having the same amount of head columns and body columns. table id=\"MyJobAfterhours{{ afterhours_type }}\" class=\"table table-striped table-bordered\" cellspacing=\"0\" data-table=\"true\" width=\"100%\" .. /table Automatic ajax form submit There are few things to do: Add class on element that wraps the form add-record-form Next is passing the attribute with form data-entity Last thing is defining the special section in crud.js described in section TODO div class=\"col-md-6 align-self-center add-record-form\" {{ form(afterhours_form_view,{'attr':{'data-entity':\"MyJobAfterhours\"}}) }} /div The same applies for the table that You use for given module - id should represent the same data-entity value, table id=\"MyJobAfterhours{{ afterhours_type }}\" class=\"table table-striped table-bordered\" cellspacing=\"0\" data-table=\"true\" width=\"100%\" .. Automatic crud on table elements As an example let's take the table used for MyCar module: table id=\"MyPaymentsSettings\" class=\"table table-striped table-bordered\" cellspacing=\"0\" data-table=\"true\" width=\"100%\" thead tr td class=\"d-none\" Id /td td Name /td td Actions /td /tr /thead tbody {% for payment_type in payments_types %} tr class=\"trash-parent car-single-data editable-parent save-parent\" data-type=\"MyPaymentsSettings\" td class=\"d-none id\" {{ payment_type.id }} /td td class=\"value\" {{ payment_type.value }} /td td contenteditable=\"false\" i class=\"fa fa-trash\" aria-hidden=\"true\" /i i class=\"far fa-edit\" /i i class=\"far fa-save d-none\" /i /td /tr {% endfor %} /tbody /table There are few important things to make the crud buttons work: id should be equal to mentioned above data-entity each tr element should have data-type equal to the id of table and data-entity passed on form each tr element must have this classes trash-parent , editable-parent , save-parent each one is responsible for specified thing (removal/editing/saving) elements","title":"Tips and tricks - automatition"},{"location":"tips-and-tricks-automatition/#tips-and-tricks-automatition","text":"","title":"Tips and tricks - automatition"},{"location":"tips-and-tricks-automatition/#automatic-datatable","text":"If You have table then just add attribute to it data-table=\"true\" - it will automatically turn table to datatable if the table is correct which means for example having the same amount of head columns and body columns. table id=\"MyJobAfterhours{{ afterhours_type }}\" class=\"table table-striped table-bordered\" cellspacing=\"0\" data-table=\"true\" width=\"100%\" .. /table","title":"Automatic datatable"},{"location":"tips-and-tricks-automatition/#automatic-ajax-form-submit","text":"There are few things to do: Add class on element that wraps the form add-record-form Next is passing the attribute with form data-entity Last thing is defining the special section in crud.js described in section TODO div class=\"col-md-6 align-self-center add-record-form\" {{ form(afterhours_form_view,{'attr':{'data-entity':\"MyJobAfterhours\"}}) }} /div The same applies for the table that You use for given module - id should represent the same data-entity value, table id=\"MyJobAfterhours{{ afterhours_type }}\" class=\"table table-striped table-bordered\" cellspacing=\"0\" data-table=\"true\" width=\"100%\" ..","title":"Automatic ajax form submit"},{"location":"tips-and-tricks-automatition/#automatic-crud-on-table-elements","text":"As an example let's take the table used for MyCar module: table id=\"MyPaymentsSettings\" class=\"table table-striped table-bordered\" cellspacing=\"0\" data-table=\"true\" width=\"100%\" thead tr td class=\"d-none\" Id /td td Name /td td Actions /td /tr /thead tbody {% for payment_type in payments_types %} tr class=\"trash-parent car-single-data editable-parent save-parent\" data-type=\"MyPaymentsSettings\" td class=\"d-none id\" {{ payment_type.id }} /td td class=\"value\" {{ payment_type.value }} /td td contenteditable=\"false\" i class=\"fa fa-trash\" aria-hidden=\"true\" /i i class=\"far fa-edit\" /i i class=\"far fa-save d-none\" /i /td /tr {% endfor %} /tbody /table There are few important things to make the crud buttons work: id should be equal to mentioned above data-entity each tr element should have data-type equal to the id of table and data-entity passed on form each tr element must have this classes trash-parent , editable-parent , save-parent each one is responsible for specified thing (removal/editing/saving) elements","title":"Automatic crud on table elements"},{"location":"tips-and-tricks-patterns/","text":"Tips and tricks - patterns Controller patterns I truly recommend following the basic functions structures in module controllers - there is logic behind it: This function is made so because: it can be called via ajax (then it refreshes the content) it can be called on page opening (loads full content of page) public function display(Request $request) { $this- addFormDataToDB($this- getForm(), $request); if (!$request- isXmlHttpRequest()) { return $this- renderTemplate(false); } return $this- renderTemplate(true); } This function is made so because: it's called via ajax, removes record and then reloads the page content public function remove(Request $request) { $response = $this- app- repositories- deleteById( Repositories::MY_PASSWORDS_REPOSITORY_NAME, $request- request- get('id') ); if ($response- getStatusCode() == 200) { return $this- renderTemplate(true); } return $response; } This function is made so because: when called via ajax it updates the records on success and reloads the page content it returns error and shows error box on fail of update public function update(Request $request) { $parameters = $request- request- all(); $entity = $this- app- repositories- myPasswordsRepository- find($parameters['id']); $response = $this- app- repositories- update($parameters, $entity); return $response; } This function is made so because: template can be loaded on: page opening then it needs to lad everything ajax load because it needs to reload content - it still needs data protected function renderTemplate($ajax_render = false) { $form = $this- getForm(); $form_view = $form- createView(); $passwords = $this- app- repositories- myPasswordsRepository- findBy(['deleted' = 0]); $groups = $this- app- repositories- myPasswordsGroupsRepository- findBy(['deleted' = 0]); return $this- render('modules/my-passwords/my-passwords.html.twig', [ 'form' = $form_view, 'ajax_render' = $ajax_render, 'passwords' = $passwords, 'groups' = $groups ]); } Twig patterns You can notice this in twig templates {% if ajax_render == false %} {% set template= \"base.html.twig\" %} {% else %} {% set template= \"blank.html.twig\" %} {% endif %} {% extends template %} It's used for: normal page loading - then it loads all content: head, body, footer etc. ajax page load - then it loads only the body or just some part of page and loads it to div (reloads page content via ajax) Some other patters are described in Tips and tricks - automatition Js patterns Most of js patterns are covered in Writing module frontend - JS","title":"Tips and tricks - patterns"},{"location":"tips-and-tricks-patterns/#tips-and-tricks-patterns","text":"","title":"Tips and tricks - patterns"},{"location":"tips-and-tricks-patterns/#controller-patterns","text":"I truly recommend following the basic functions structures in module controllers - there is logic behind it: This function is made so because: it can be called via ajax (then it refreshes the content) it can be called on page opening (loads full content of page) public function display(Request $request) { $this- addFormDataToDB($this- getForm(), $request); if (!$request- isXmlHttpRequest()) { return $this- renderTemplate(false); } return $this- renderTemplate(true); } This function is made so because: it's called via ajax, removes record and then reloads the page content public function remove(Request $request) { $response = $this- app- repositories- deleteById( Repositories::MY_PASSWORDS_REPOSITORY_NAME, $request- request- get('id') ); if ($response- getStatusCode() == 200) { return $this- renderTemplate(true); } return $response; } This function is made so because: when called via ajax it updates the records on success and reloads the page content it returns error and shows error box on fail of update public function update(Request $request) { $parameters = $request- request- all(); $entity = $this- app- repositories- myPasswordsRepository- find($parameters['id']); $response = $this- app- repositories- update($parameters, $entity); return $response; } This function is made so because: template can be loaded on: page opening then it needs to lad everything ajax load because it needs to reload content - it still needs data protected function renderTemplate($ajax_render = false) { $form = $this- getForm(); $form_view = $form- createView(); $passwords = $this- app- repositories- myPasswordsRepository- findBy(['deleted' = 0]); $groups = $this- app- repositories- myPasswordsGroupsRepository- findBy(['deleted' = 0]); return $this- render('modules/my-passwords/my-passwords.html.twig', [ 'form' = $form_view, 'ajax_render' = $ajax_render, 'passwords' = $passwords, 'groups' = $groups ]); }","title":"Controller patterns"},{"location":"tips-and-tricks-patterns/#twig-patterns","text":"You can notice this in twig templates {% if ajax_render == false %} {% set template= \"base.html.twig\" %} {% else %} {% set template= \"blank.html.twig\" %} {% endif %} {% extends template %} It's used for: normal page loading - then it loads all content: head, body, footer etc. ajax page load - then it loads only the body or just some part of page and loads it to div (reloads page content via ajax) Some other patters are described in Tips and tricks - automatition","title":"Twig patterns"},{"location":"tips-and-tricks-patterns/#js-patterns","text":"Most of js patterns are covered in Writing module frontend - JS","title":"Js patterns"},{"location":"tips-and-tricks-special-controllers/","text":"Tips and tricks - special controllers There is a special Controllers folder: src/Controller/Utils/ Repository of repositories Repositories.php This is a central point for calling repositories all over the modules. Just take a look how private variables are defined, assigned in controller etc. Size matters const MY_CAR_SCHEDULES_TYPES_REPOSITORY_NAME = 'MyCarSchedulesTypesRepository'; public $myCarSchedulesTypesRepository; MyCarSchedulesTypesRepository $myCarSchedulesTypesRepository $this- myCarSchedulesTypesRepository = $myCarSchedulesTypesRepository; Follow the naming patter (size of first letter etc). This is important because it's used in automated repository functions. Delete public function deleteById This function handles removal of entity. You just pass entity name and id. That's all You need there. Update public function update This function is automated for updating given fields for given entity - passed from ajax. What You need to know that it accepts: array of fields names with corresponding values - this function uses the names to call entity functions so for example this is what is passed from js 'id': id, 'name': name, 'myGoal': { \"type\": \"entity\", 'namespace': 'App\\\\Entity\\\\Modules\\\\Goals\\\\MyGoals', 'id': goalId, }, So in this case update method will simply work like this: take the entity name and fetch entity from DB use names to change fields values so with above example it does: setId() setName() the last type is special - used for relational field where You need to: setType($relationEntity) Relation checking private function hasChildren This function is used for checking if the entity that You for example try to remove has any relating records. It's not used everywhere. Application controller Application.php This controller is a central point for any special controllers or any functionality that is often called. So this will be most likely expanded in future.","title":"Tips and tricks - special controllers"},{"location":"tips-and-tricks-special-controllers/#tips-and-tricks-special-controllers","text":"There is a special Controllers folder: src/Controller/Utils/","title":"Tips and tricks - special controllers"},{"location":"tips-and-tricks-special-controllers/#repository-of-repositories","text":"Repositories.php This is a central point for calling repositories all over the modules. Just take a look how private variables are defined, assigned in controller etc. Size matters const MY_CAR_SCHEDULES_TYPES_REPOSITORY_NAME = 'MyCarSchedulesTypesRepository'; public $myCarSchedulesTypesRepository; MyCarSchedulesTypesRepository $myCarSchedulesTypesRepository $this- myCarSchedulesTypesRepository = $myCarSchedulesTypesRepository; Follow the naming patter (size of first letter etc). This is important because it's used in automated repository functions.","title":"Repository of repositories"},{"location":"tips-and-tricks-special-controllers/#delete","text":"public function deleteById This function handles removal of entity. You just pass entity name and id. That's all You need there.","title":"Delete"},{"location":"tips-and-tricks-special-controllers/#update","text":"public function update This function is automated for updating given fields for given entity - passed from ajax. What You need to know that it accepts: array of fields names with corresponding values - this function uses the names to call entity functions so for example this is what is passed from js 'id': id, 'name': name, 'myGoal': { \"type\": \"entity\", 'namespace': 'App\\\\Entity\\\\Modules\\\\Goals\\\\MyGoals', 'id': goalId, }, So in this case update method will simply work like this: take the entity name and fetch entity from DB use names to change fields values so with above example it does: setId() setName() the last type is special - used for relational field where You need to: setType($relationEntity)","title":"Update"},{"location":"tips-and-tricks-special-controllers/#relation-checking","text":"private function hasChildren This function is used for checking if the entity that You for example try to remove has any relating records. It's not used everywhere.","title":"Relation checking"},{"location":"tips-and-tricks-special-controllers/#application-controller","text":"Application.php This controller is a central point for any special controllers or any functionality that is often called. So this will be most likely expanded in future.","title":"Application controller"},{"location":"writing-module-backend/","text":"Writing module backend logic There is simple logic to follow here. Put every controller, entity, form and repository into corresponding module folder Controller Each controller for given module should go to src/Controller/Modules/ moduleName Entity Each Entity for given module should go to src/Entity/Modules/ moduleEntity Repository Each Repository for given module should go to src/Repository/Modules/Modules/ moduleEntity Form Each Form for given module should go to src/Form/Modules/Modules/ moduleEntity","title":"Writing module - backend"},{"location":"writing-module-backend/#writing-module-backend-logic","text":"There is simple logic to follow here. Put every controller, entity, form and repository into corresponding module folder","title":"Writing module backend logic"},{"location":"writing-module-backend/#controller","text":"Each controller for given module should go to src/Controller/Modules/ moduleName","title":"Controller"},{"location":"writing-module-backend/#entity","text":"Each Entity for given module should go to src/Entity/Modules/ moduleEntity","title":"Entity"},{"location":"writing-module-backend/#repository","text":"Each Repository for given module should go to src/Repository/Modules/Modules/ moduleEntity","title":"Repository"},{"location":"writing-module-backend/#form","text":"Each Form for given module should go to src/Form/Modules/Modules/ moduleEntity","title":"Form"},{"location":"writing-module-frontend/","text":"Writing module frontend logic CSS There is't much logic for CSS/SCSS All the scss files can be found in: src/scss/ DO NOT touch app.css just don't there were some problems with Symfonator ui missing css etc, so this big css file is what originally should be in multiple small files this is the only thing that keeps all the UI in one part If You want some changes then do them in other files /src/scss/ui - contains mostly the global changes like buttons, fonts colors etc /src/scss/libs/ - contains both: basic css for libraries (like I wrote earlier, due to the problems with webpack) customization-for-liblaries contains css rules that overwrite the basic lib I put modules based scss into /src/scss/ui with proper file name Twig Each templates for given module should go to templates/modules/ moduleName JS Passing relation field data from front to backend And there is generally this one big file src/assets/scripts/ui/crud.js and it will get bigger This file - is something You need to know about if You want to do some changes in code This is like - central point for handling 95% of the crud done via ajax I won't describe all the methods here, their names etc petty much say for themselves However there are 2 very important sections: entity_actions form_target_actions The most important thing here is Follow the pattern - there is automated logic that relies on what You pass out from each of this functions Entity Action example: \"MyCar\": { makeUpdateData: function (tr_parent_element) { let id = $(tr_parent_element).find('.id').html(); let name = $(tr_parent_element).find('.name').html(); let scheduleType = $(tr_parent_element).find('.type :selected'); let date = $(tr_parent_element).find('.date').html(); let information = $(tr_parent_element).find('.information').html(); let success_message = ui.crud.messages.entityUpdateSuccess(this.entity_name); let fail_message = ui.crud.messages.entityUpdateFail(this.entity_name); let url = '/my-car/update/'; let ajax_data = { 'name': name, 'date': date, 'information': information, 'id': id, 'scheduleType': { \"type\": \"entity\", 'namespace': 'App\\\\Entity\\\\Modules\\\\Car\\\\MyCarSchedulesTypes', 'id': $(scheduleType).val(), }, }; return { 'url': url, 'data': ajax_data, 'success_message': success_message, 'fail_message': fail_message, }; }, makeRemoveData: function (parent_element) { let id = $(parent_element).find('.id').html(); let url = '/my-car/remove/'; let success_message = ui.crud.messages.entityRemoveSuccess(this.entity_name); let fail_message = ui.crud.messages.entityRemoveFail(this.entity_name); return { 'url': url, 'data': { 'id': id }, 'success_message': success_message, 'fail_message': fail_message, 'is_dataTable': true, }; }, makeCreateData: function () { let url = '/my-car'; let success_message = ui.crud.messages.entityCreatedRecordSuccess(this.entity_name); let fail_message = ui.crud.messages.entityCreatedRecordFail(this.entity_name); return { 'url': url, 'success_message': success_message, 'fail_message': fail_message, }; }, entity_name: \"My Car\", makeUpdateData - returns data set that will be used to update record via ajax for entity makeRemoveData - this is bascially just id passed to backend to remove record via ajax makeCreateData - this is for handling creation of records entity_name - this name will be just displayed in popup box on success or fail MyCar - this is the primary key and acutally name of Your entity, by this the script knows which logic should be applied for given module Like i mentioned in other place, this is the twig example: div class=\"col-md-6 align-self-center add-record-form\" {{ form(car_schedule_form_view,{'attr':{' data-entity':\"MyCar\"}}) }} /div Just pay attention where i use given entity names in templates for module. Form target Action example: Logic for this is very simillar to entity_action, but instead of focusing on entity I focus just on single form. Once You understand Entity action then this will be very easy to understand","title":"Writing module - frontend"},{"location":"writing-module-frontend/#writing-module-frontend-logic","text":"","title":"Writing module frontend logic"},{"location":"writing-module-frontend/#css","text":"There is't much logic for CSS/SCSS All the scss files can be found in: src/scss/ DO NOT touch app.css just don't there were some problems with Symfonator ui missing css etc, so this big css file is what originally should be in multiple small files this is the only thing that keeps all the UI in one part If You want some changes then do them in other files /src/scss/ui - contains mostly the global changes like buttons, fonts colors etc /src/scss/libs/ - contains both: basic css for libraries (like I wrote earlier, due to the problems with webpack) customization-for-liblaries contains css rules that overwrite the basic lib I put modules based scss into /src/scss/ui with proper file name","title":"CSS"},{"location":"writing-module-frontend/#twig","text":"Each templates for given module should go to templates/modules/ moduleName","title":"Twig"},{"location":"writing-module-frontend/#js","text":"Passing relation field data from front to backend And there is generally this one big file src/assets/scripts/ui/crud.js and it will get bigger This file - is something You need to know about if You want to do some changes in code This is like - central point for handling 95% of the crud done via ajax I won't describe all the methods here, their names etc petty much say for themselves However there are 2 very important sections: entity_actions form_target_actions The most important thing here is Follow the pattern - there is automated logic that relies on what You pass out from each of this functions","title":"JS"},{"location":"writing-module-frontend/#entity-action-example","text":"\"MyCar\": { makeUpdateData: function (tr_parent_element) { let id = $(tr_parent_element).find('.id').html(); let name = $(tr_parent_element).find('.name').html(); let scheduleType = $(tr_parent_element).find('.type :selected'); let date = $(tr_parent_element).find('.date').html(); let information = $(tr_parent_element).find('.information').html(); let success_message = ui.crud.messages.entityUpdateSuccess(this.entity_name); let fail_message = ui.crud.messages.entityUpdateFail(this.entity_name); let url = '/my-car/update/'; let ajax_data = { 'name': name, 'date': date, 'information': information, 'id': id, 'scheduleType': { \"type\": \"entity\", 'namespace': 'App\\\\Entity\\\\Modules\\\\Car\\\\MyCarSchedulesTypes', 'id': $(scheduleType).val(), }, }; return { 'url': url, 'data': ajax_data, 'success_message': success_message, 'fail_message': fail_message, }; }, makeRemoveData: function (parent_element) { let id = $(parent_element).find('.id').html(); let url = '/my-car/remove/'; let success_message = ui.crud.messages.entityRemoveSuccess(this.entity_name); let fail_message = ui.crud.messages.entityRemoveFail(this.entity_name); return { 'url': url, 'data': { 'id': id }, 'success_message': success_message, 'fail_message': fail_message, 'is_dataTable': true, }; }, makeCreateData: function () { let url = '/my-car'; let success_message = ui.crud.messages.entityCreatedRecordSuccess(this.entity_name); let fail_message = ui.crud.messages.entityCreatedRecordFail(this.entity_name); return { 'url': url, 'success_message': success_message, 'fail_message': fail_message, }; }, entity_name: \"My Car\", makeUpdateData - returns data set that will be used to update record via ajax for entity makeRemoveData - this is bascially just id passed to backend to remove record via ajax makeCreateData - this is for handling creation of records entity_name - this name will be just displayed in popup box on success or fail MyCar - this is the primary key and acutally name of Your entity, by this the script knows which logic should be applied for given module Like i mentioned in other place, this is the twig example: div class=\"col-md-6 align-self-center add-record-form\" {{ form(car_schedule_form_view,{'attr':{' data-entity':\"MyCar\"}}) }} /div Just pay attention where i use given entity names in templates for module.","title":"Entity Action example:"},{"location":"writing-module-frontend/#form-target-action-example","text":"Logic for this is very simillar to entity_action, but instead of focusing on entity I focus just on single form. Once You understand Entity action then this will be very easy to understand","title":"Form target Action example:"}]}